// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package qry

import (
	orm "github.com/zaaksam/gins/extend/orm"
	json "encoding/json"
	easyjson "github.com/amoeba-inc/easyjson"
	jlexer "github.com/amoeba-inc/easyjson/jlexer"
	jwriter "github.com/amoeba-inc/easyjson/jwriter"
	io "io"
	ioutil "io/ioutil"
	strings "strings"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson70e345a5DecodeGithubComZaaksamGinsExampleModelQry(in *jlexer.Lexer, out *Demo) {
	out.ResetMark()
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
			out.MarkID()
		case "user":
			out.User = string(in.String())
			out.MarkUser()
		case "pswd":
			out.Pswd = string(in.String())
			out.MarkPswd()
		case "status":
			out.Status = int(in.Int())
			out.MarkStatus()
		case "created":
			out.Created = int64(in.Int64())
			out.MarkCreated()
		case "updated":
			out.Updated = int64(in.Int64())
			out.MarkUpdated()
		case "page":
			out.Page = int(in.Int())
			out.MarkPage()
		case "pageSize":
			out.PageSize = int(in.Int())
			out.MarkPageSize()
		default:
			in.SkipRecursive()
		}
		if err := in.Error(); err != nil {
			msg := ""
			if strings.Contains(err.Error(), "unknown field") {
				msg = "不存在的参数：" + key
			} else {
				msg = key + "格式错误"
			}
			in.ResetError(&jlexer.LexerError{
				Data: msg,
			})
			return
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if in.Error() == io.EOF {
		in.ResetError(nil)
	}
}

// init 注册数据引擎
func init() {
	orm.Register(&Demo{})
}

// NewDemo 创建新的Demo
func NewDemo() *Demo {
	v := &Demo{}
	v.ResetMark()
	return v
}

// NewItems 创建对应的切片指针对象，配合 go-component/orm 组件
func (*Demo) NewItems() interface{} {
	items := new([]Demo)
	*items = make([]Demo, 0)
	return items
}

// BindReader 从 reader 中读取内容映射绑定
func (v *Demo) BindReader(reader io.Reader) error {
	body, err := ioutil.ReadAll(reader)
	if err != nil {
		return err
	}

	return v.UnmarshalJSON(body)
}

// DBFields 数据库字段
func (v *Demo) DBFields() []string {
	fields := "id,user,pswd,status,cteated,updated,Page,PageSize"
	return strings.Split(fields, ",")
}

// DBFieldJSONTags 数据库字段对应的json tag name
func (v *Demo) DBFieldJSONTags() []string {
	names := "id,user,pswd,status,created,updated,page,pageSize"
	return strings.Split(names, ",")
}

// DBFieldsIndex 数据库字段索引 大小写敏感
func (v *Demo) DBFieldsIndex() map[string]struct{} {
	fields := v.DBFields()
	l := len(fields)
	index := make(map[string]struct{}, l)
	for i := 0; i < l; i++ {
		index[fields[i]] = struct{}{}
	}
	return index
}

// DBFieldJSONNamesIndex 数据库字段对应的json name 索引 大小写敏感
func (v *Demo) DBFieldJSONNamesIndex() map[string]struct{} {
	names := v.DBFieldJSONTags()
	l := len(names)
	index := make(map[string]struct{}, l)
	for i := 0; i < l; i++ {
		index[names[i]] = struct{}{}
	}
	return index
}

// DBFieldJSONNameIndex 数据库字段为Key, json name 为 value 索引; 大小写敏感
func (v *Demo) DBFieldJSONNameIndex() map[string]string {
	fields := v.DBFields()
	names := v.DBFieldJSONTags()
	l := len(names)
	index := make(map[string]string, l)
	for i := 0; i < l; i++ {
		index[fields[i]] = names[i]
	}
	return index
}

// JSONNameDBFieldIndex json name 为Key, 数据库字段 为 value 索引; 大小写敏感
func (v *Demo) JSONNameDBFieldIndex() map[string]string {
	fields := v.DBFields()
	names := v.DBFieldJSONTags()
	l := len(names)
	index := make(map[string]string, l)
	for i := 0; i < l; i++ {
		index[names[i]] = fields[i]
	}
	return index
}

// IsIDMark ID是否已赋值（赋值标识）
func (v *Demo) IsIDMark() bool {
	return v.HasPropertyMark(v.GetIDMarkKey())
}

// SetID 设置ID}的值，并将赋值标识设为:true
func (v *Demo) SetID(val uint64) {
	v.ID = val
	v.MarkID()
}

// UnMarkID 取消ID}的赋值标识，设为:false
func (v *Demo) UnMarkID() {
	v.SetPropertyMark(v.GetIDMarkKey(), false)
	v.SetFieldMark(v.GetIDMarkKey(), false)
}

// MarkID 设置ID}的赋值标识，设为:true
func (v *Demo) MarkID() {
	v.SetPropertyMark(v.GetIDMarkKey(), true)
	v.SetFieldMark(v.GetIDMarkKey(), true)
}

// GetIDMarkKey 获取MarkKey
func (v *Demo) GetIDMarkKey() string {
	return "id"
}

// IsUserMark User是否已赋值（赋值标识）
func (v *Demo) IsUserMark() bool {
	return v.HasPropertyMark(v.GetUserMarkKey())
}

// SetUser 设置User}的值，并将赋值标识设为:true
func (v *Demo) SetUser(val string) {
	v.User = val
	v.MarkUser()
}

// UnMarkUser 取消User}的赋值标识，设为:false
func (v *Demo) UnMarkUser() {
	v.SetPropertyMark(v.GetUserMarkKey(), false)
	v.SetFieldMark(v.GetUserMarkKey(), false)
}

// MarkUser 设置User}的赋值标识，设为:true
func (v *Demo) MarkUser() {
	v.SetPropertyMark(v.GetUserMarkKey(), true)
	v.SetFieldMark(v.GetUserMarkKey(), true)
}

// GetUserMarkKey 获取MarkKey
func (v *Demo) GetUserMarkKey() string {
	return "user"
}

// IsPswdMark Pswd是否已赋值（赋值标识）
func (v *Demo) IsPswdMark() bool {
	return v.HasPropertyMark(v.GetPswdMarkKey())
}

// SetPswd 设置Pswd}的值，并将赋值标识设为:true
func (v *Demo) SetPswd(val string) {
	v.Pswd = val
	v.MarkPswd()
}

// UnMarkPswd 取消Pswd}的赋值标识，设为:false
func (v *Demo) UnMarkPswd() {
	v.SetPropertyMark(v.GetPswdMarkKey(), false)
	v.SetFieldMark(v.GetPswdMarkKey(), false)
}

// MarkPswd 设置Pswd}的赋值标识，设为:true
func (v *Demo) MarkPswd() {
	v.SetPropertyMark(v.GetPswdMarkKey(), true)
	v.SetFieldMark(v.GetPswdMarkKey(), true)
}

// GetPswdMarkKey 获取MarkKey
func (v *Demo) GetPswdMarkKey() string {
	return "pswd"
}

// IsStatusMark Status是否已赋值（赋值标识）
func (v *Demo) IsStatusMark() bool {
	return v.HasPropertyMark(v.GetStatusMarkKey())
}

// SetStatus 设置Status}的值，并将赋值标识设为:true
func (v *Demo) SetStatus(val int) {
	v.Status = val
	v.MarkStatus()
}

// UnMarkStatus 取消Status}的赋值标识，设为:false
func (v *Demo) UnMarkStatus() {
	v.SetPropertyMark(v.GetStatusMarkKey(), false)
	v.SetFieldMark(v.GetStatusMarkKey(), false)
}

// MarkStatus 设置Status}的赋值标识，设为:true
func (v *Demo) MarkStatus() {
	v.SetPropertyMark(v.GetStatusMarkKey(), true)
	v.SetFieldMark(v.GetStatusMarkKey(), true)
}

// GetStatusMarkKey 获取MarkKey
func (v *Demo) GetStatusMarkKey() string {
	return "status"
}

// IsCreatedMark Created是否已赋值（赋值标识）
func (v *Demo) IsCreatedMark() bool {
	return v.HasPropertyMark(v.GetCreatedMarkKey())
}

// SetCreated 设置Created}的值，并将赋值标识设为:true
func (v *Demo) SetCreated(val int64) {
	v.Created = val
	v.MarkCreated()
}

// UnMarkCreated 取消Created}的赋值标识，设为:false
func (v *Demo) UnMarkCreated() {
	v.SetPropertyMark(v.GetCreatedMarkKey(), false)
	v.SetFieldMark(v.GetCreatedMarkKey(), false)
}

// MarkCreated 设置Created}的赋值标识，设为:true
func (v *Demo) MarkCreated() {
	v.SetPropertyMark(v.GetCreatedMarkKey(), true)
	v.SetFieldMark(v.GetCreatedMarkKey(), true)
}

// GetCreatedMarkKey 获取MarkKey
func (v *Demo) GetCreatedMarkKey() string {
	return "cteated"
}

// IsUpdatedMark Updated是否已赋值（赋值标识）
func (v *Demo) IsUpdatedMark() bool {
	return v.HasPropertyMark(v.GetUpdatedMarkKey())
}

// SetUpdated 设置Updated}的值，并将赋值标识设为:true
func (v *Demo) SetUpdated(val int64) {
	v.Updated = val
	v.MarkUpdated()
}

// UnMarkUpdated 取消Updated}的赋值标识，设为:false
func (v *Demo) UnMarkUpdated() {
	v.SetPropertyMark(v.GetUpdatedMarkKey(), false)
	v.SetFieldMark(v.GetUpdatedMarkKey(), false)
}

// MarkUpdated 设置Updated}的赋值标识，设为:true
func (v *Demo) MarkUpdated() {
	v.SetPropertyMark(v.GetUpdatedMarkKey(), true)
	v.SetFieldMark(v.GetUpdatedMarkKey(), true)
}

// GetUpdatedMarkKey 获取MarkKey
func (v *Demo) GetUpdatedMarkKey() string {
	return "updated"
}

// IsPageMark Page是否已赋值（赋值标识）
func (v *Demo) IsPageMark() bool {
	return v.HasPropertyMark(v.GetPageMarkKey())
}

// SetPage 设置Page}的值，并将赋值标识设为:true
func (v *Demo) SetPage(val int) {
	v.Page = val
	v.MarkPage()
}

// UnMarkPage 取消Page}的赋值标识，设为:false
func (v *Demo) UnMarkPage() {
	v.SetPropertyMark(v.GetPageMarkKey(), false)
	v.SetFieldMark(v.GetPageMarkKey(), false)
}

// MarkPage 设置Page}的赋值标识，设为:true
func (v *Demo) MarkPage() {
	v.SetPropertyMark(v.GetPageMarkKey(), true)
	v.SetFieldMark(v.GetPageMarkKey(), true)
}

// GetPageMarkKey 获取MarkKey
func (v *Demo) GetPageMarkKey() string {
	return "Page"
}

// IsPageSizeMark PageSize是否已赋值（赋值标识）
func (v *Demo) IsPageSizeMark() bool {
	return v.HasPropertyMark(v.GetPageSizeMarkKey())
}

// SetPageSize 设置PageSize}的值，并将赋值标识设为:true
func (v *Demo) SetPageSize(val int) {
	v.PageSize = val
	v.MarkPageSize()
}

// UnMarkPageSize 取消PageSize}的赋值标识，设为:false
func (v *Demo) UnMarkPageSize() {
	v.SetPropertyMark(v.GetPageSizeMarkKey(), false)
	v.SetFieldMark(v.GetPageSizeMarkKey(), false)
}

// MarkPageSize 设置PageSize}的赋值标识，设为:true
func (v *Demo) MarkPageSize() {
	v.SetPropertyMark(v.GetPageSizeMarkKey(), true)
	v.SetFieldMark(v.GetPageSizeMarkKey(), true)
}

// GetPageSizeMarkKey 获取MarkKey
func (v *Demo) GetPageSizeMarkKey() string {
	return "PageSize"
}

func easyjson70e345a5EncodeGithubComZaaksamGinsExampleModelQry(out *jwriter.Writer, in Demo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"pswd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pswd))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Updated))
	}
	{
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"pageSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Demo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson70e345a5EncodeGithubComZaaksamGinsExampleModelQry(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Demo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70e345a5EncodeGithubComZaaksamGinsExampleModelQry(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Demo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson70e345a5DecodeGithubComZaaksamGinsExampleModelQry(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Demo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70e345a5DecodeGithubComZaaksamGinsExampleModelQry(l, v)
}
